var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/CreateUserDto.html",[0,0.333,1,0.914]],["body/classes/CreateUserDto.html",[0,0.313,1,0.858,2,0.847,3,0.555,4,0.447,5,0.447,6,1.064,7,0.355,8,1.645,9,3.02,10,2.011,11,2.011,12,2.011,13,2.447,14,1.27,15,0.08,16,1.944,17,1.801,18,2.965,19,2.155,20,2.787,21,2.787,22,3.206,23,3.651,24,3.651,25,2.155,26,3.828,27,3.956,28,3.956,29,3.956,30,2.965,31,2.965,32,2.965,33,2.155,34,3.651,35,1.456,36,1.393,37,2.155,38,1.393,39,2.787,40,3.39,41,2.155,42,1.393,43,2.155,44,1.393,45,0.858,46,3.206,47,0.847,48,2.635,49,2.635,50,1.064,51,0.555,52,1.801,53,1.456,54,2.155,55,2.155,56,0.025,57,0.039,58,0.025]],["title/classes/User.html",[0,0.333,59,0.736]],["body/classes/User.html",[0,0.323,2,1.349,3,0.885,4,0.713,5,0.713,7,0.566,8,2.311,10,2.629,11,2.629,12,2.629,13,2.629,14,1.335,15,0.081,16,1.817,17,2.247,35,1.817,39,2.823,45,0.885,51,0.885,53,1.487,56,0.04,57,0.055,58,0.04,59,0.972,60,1.696,61,3.443,62,3.698,63,2.221,64,2.221,65,3.698,66,2.221,67,2.221,68,3.027,69,3.027,70,2.311,71,2.221,72,3.698,73,3.027,74,3.027,75,1.349,76,1.349,77,1.696]],["title/controllers/UserController.html",[78,1.127,79,1.127]],["body/controllers/UserController.html",[0,0.15,1,1.249,3,0.411,4,0.331,5,0.331,7,0.263,9,0.787,14,0.802,15,0.083,16,1.059,17,1.517,20,1.907,21,2.106,35,1.227,45,1.099,47,0.626,51,0.411,52,2.355,53,1.227,56,0.019,57,0.031,58,0.019,59,1.006,70,1.907,76,1.517,77,1.293,78,0.506,79,0.832,80,0.787,81,0.787,82,1.031,83,1.293,84,2.788,85,1.293,86,1.293,87,1.293,88,1.293,89,1.031,90,4.13,91,2.497,92,1.694,93,2.966,94,1.031,95,1.694,96,1.031,97,3.274,98,3.274,99,1.031,100,1.031,101,1.907,102,1.907,103,2.759,104,1.907,105,0.787,106,1.694,107,2.497,108,1.694,109,2.966,110,2.156,111,1.031,112,1.031,113,1.907,114,1.031,115,1.694,116,1.694,117,1.694,118,1.694,119,1.031,120,1.031,121,1.031,122,1.031,123,1.694,124,1.031,125,1.031,126,1.694,127,1.694,128,1.694,129,1.031,130,2.497,131,0.506,132,0.692,133,0.787,134,0.787,135,0.787,136,2.759,137,3.391,138,1.031,139,1.031,140,1.031,141,1.031,142,2.497,143,1.031,144,3.274,145,3.577,146,2.497,147,1.031,148,2.497,149,2.497,150,1.907,151,1.031,152,2.499,153,2.156,154,2.497,155,2.499,156,2.497,157,1.031,158,1.031,159,1.031,160,1.031,161,1.031,162,1.031,163,1.031,164,1.031]],["title/modules/UserModule.html",[165,1.394,166,1.127]],["body/modules/UserModule.html",[0,0.355,3,0.974,4,0.785,5,0.785,15,0.082,45,1.635,51,0.974,56,0.044,57,0.059,58,0.044,59,0.785,79,1.776,80,2.465,131,1.201,132,1.318,133,1.867,165,2.196,166,2.017,167,1.486,168,1.201,169,1.867,170,1.867,171,1.201,172,2.76,173,1.867,174,1.867,175,1.867,176,2.465,177,1.867,178,1.867,179,2.445,180,2.445,181,1.486,182,1.486,183,2.445,184,1.867,185,2.445,186,2.445,187,2.445,188,2.445]],["title/injectables/UserService.html",[132,0.736,189,1.127]],["body/injectables/UserService.html",[0,0.247,1,1.627,3,0.676,4,0.545,5,0.545,7,0.432,14,1.052,15,0.083,16,1.459,35,1.717,45,1.392,51,0.676,56,0.031,57,0.045,58,0.031,59,1.213,75,1.032,76,1.992,83,1.91,84,3.154,85,1.91,86,1.91,87,2.502,88,1.91,101,2.502,102,2.502,104,2.502,105,1.91,113,1.296,131,0.834,132,0.803,135,1.296,150,2.668,152,2.502,155,1.296,181,1.032,184,1.296,189,1.229,190,1.698,191,1.296,192,2.502,193,1.698,194,2.502,195,1.698,196,2.502,197,2.502,198,1.698,199,3.879,200,1.698,201,1.698,202,2.502,203,1.698,204,1.698,205,1.698,206,1.698,207,1.698,208,1.698,209,1.698,210,2.268,211,2.502,212,1.698,213,1.698]],["title/coverage.html",[214,1.88]],["body/coverage.html",[0,0.511,1,1.113,5,0.897,6,2.134,14,0.897,15,0.079,56,0.051,57,0.064,58,0.051,59,0.897,60,2.134,78,1.373,79,1.373,81,2.134,132,0.897,171,1.373,182,1.698,189,1.373,191,2.134,210,2.134,214,1.698,215,2.795,216,2.795,217,2.795,218,2.134,219,2.795,220,4.255,221,3.519,222,2.134,223,2.795,224,3.852,225,2.795,226,2.795,227,2.795]],["title/dependencies.html",[168,1.35,228,1.933]],["body/dependencies.html",[0,0.505,15,0.083,47,1.667,50,2.095,56,0.05,57,0.063,58,0.05,75,1.667,131,1.348,134,2.656,168,1.348,181,1.667,229,3.82,230,2.744,231,2.744,232,2.744,233,2.744,234,2.744,235,2.744,236,2.744,237,2.744,238,2.744,239,2.744,240,2.744,241,2.744,242,2.744,243,2.744,244,2.744,245,2.744,246,2.744,247,2.744,248,2.744,249,2.744,250,2.744,251,2.744]],["title/miscellaneous/functions.html",[252,0.95,253,2.098]],["body/miscellaneous/functions.html",[7,0.858,15,0.072,56,0.061,57,0.072,58,0.061,171,2.053,222,2.573,252,1.655,253,2.573,254,3.37]],["title/index.html",[7,0.492,255,1.933,256,1.933]],["body/index.html",[4,0.729,15,0.08,52,1.38,56,0.041,57,0.056,58,0.041,194,1.734,214,1.38,257,2.271,258,2.271,259,3.073,260,2.271,261,2.271,262,2.271,263,2.271,264,2.271,265,2.271,266,2.271,267,2.271,268,2.271,269,3.483,270,2.271,271,2.271,272,2.271,273,4.11,274,2.271,275,2.271,276,2.271,277,4.019,278,2.271,279,2.271,280,3.073,281,2.271,282,2.271,283,2.271,284,2.271,285,3.073,286,3.073,287,2.271,288,2.271,289,2.271,290,3.073,291,3.073,292,2.271,293,2.271,294,2.271,295,2.271,296,2.271,297,1.734,298,2.271,299,2.271,300,2.271,301,2.271,302,2.271,303,2.271,304,2.271,305,2.271,306,2.271,307,2.271,308,2.271,309,2.271,310,2.271,311,2.271,312,2.271,313,2.271,314,2.271,315,2.271]],["title/modules.html",[167,1.88]],["body/modules.html",[15,0.072,56,0.062,57,0.072,58,0.062,166,1.674,167,2.071,297,2.602,316,3.408,317,3.408,318,3.408]],["title/overview.html",[319,2.362]],["body/overview.html",[2,1.824,15,0.072,56,0.055,57,0.067,58,0.055,78,1.475,132,1.277,165,2.236,166,2.037,168,1.475,169,2.292,170,2.292,171,1.475,172,2.292,173,2.292,174,2.292,175,2.292,176,2.809,177,2.292,178,2.292,189,1.475,319,2.292,320,3.979,321,3.002]],["title/miscellaneous/variables.html",[252,0.95,322,2.098]],["body/miscellaneous/variables.html",[7,0.761,14,1.177,15,0.079,53,1.468,56,0.054,57,0.067,58,0.054,182,2.229,218,2.281,252,1.468,322,2.281,323,2.988,324,2.988,325,2.988,326,2.988,327,2.988,328,2.988,329,2.988,330,2.988,331,2.988,332,2.988,333,2.988,334,2.988,335,2.988,336,2.988,337,2.988,338,2.988,339,2.988,340,2.988]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":220,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":243,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":236,"title":{},"body":{"dependencies.html":{}}}],["0.2.28",{"_index":251,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":235,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":221,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":224,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":225,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":320,"title":{},"body":{"overview.html":{}}}],["2",{"_index":321,"title":{},"body":{"overview.html":{}}}],["200",{"_index":109,"title":{},"body":{"controllers/UserController.html":{}}}],["201",{"_index":95,"title":{},"body":{"controllers/UserController.html":{}}}],["3",{"_index":23,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["3.0.2",{"_index":245,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":250,"title":{},"body":{"dependencies.html":{}}}],["4.6.1",{"_index":232,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":97,"title":{},"body":{"controllers/UserController.html":{}}}],["6.5.4",{"_index":247,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":229,"title":{},"body":{"dependencies.html":{}}}],["7.1.4",{"_index":233,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":238,"title":{},"body":{"dependencies.html":{}}}],["8.4.1",{"_index":240,"title":{},"body":{"dependencies.html":{}}}],["actualiza",{"_index":123,"title":{},"body":{"controllers/UserController.html":{}}}],["al",{"_index":31,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["amazing",{"_index":298,"title":{},"body":{"index.html":{}}}],["angular",{"_index":268,"title":{},"body":{"index.html":{}}}],["apellido",{"_index":37,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apioperation",{"_index":136,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":91,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":46,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":18,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiresponse",{"_index":137,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags",{"_index":138,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('usuario",{"_index":139,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":275,"title":{},"body":{"index.html":{}}}],["applications",{"_index":265,"title":{},"body":{"index.html":{}}}],["async",{"_index":84,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["author",{"_index":308,"title":{},"body":{"index.html":{}}}],["await",{"_index":150,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":299,"title":{},"body":{"index.html":{}}}],["bad",{"_index":98,"title":{},"body":{"controllers/UserController.html":{}}}],["body",{"_index":103,"title":{},"body":{"controllers/UserController.html":{}}}],["bootstrap",{"_index":171,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":318,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":316,"title":{},"body":{"modules.html":{}}}],["building",{"_index":260,"title":{},"body":{"index.html":{}}}],["campo",{"_index":28,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["caracteres",{"_index":55,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["caracteres.'})@isstring({message",{"_index":33,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["catch",{"_index":154,"title":{},"body":{"controllers/UserController.html":{}}}],["class",{"_index":0,"title":{"classes/CreateUserDto.html":{},"classes/User.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":174,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":175,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":72,"title":{},"body":{"classes/User.html":{}}}],["column({type",{"_index":61,"title":{},"body":{"classes/User.html":{}}}],["const",{"_index":149,"title":{},"body":{"controllers/UserController.html":{}}}],["constructor",{"_index":192,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":141,"title":{},"body":{"controllers/UserController.html":{}}}],["constructor(userrepository",{"_index":193,"title":{},"body":{"injectables/UserService.html":{}}}],["contener",{"_index":30,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["controller",{"_index":78,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('user",{"_index":140,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":80,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["coverage",{"_index":214,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["crea",{"_index":92,"title":{},"body":{"controllers/UserController.html":{}}}],["creados",{"_index":143,"title":{},"body":{"controllers/UserController.html":{}}}],["creados.'})@apiresponse({status",{"_index":119,"title":{},"body":{"controllers/UserController.html":{}}}],["created",{"_index":157,"title":{},"body":{"controllers/UserController.html":{}}}],["created.'})@apiresponse({status",{"_index":96,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser",{"_index":85,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":158,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(body",{"_index":89,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(createuserdto",{"_index":197,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":1,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["database",{"_index":336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["debe",{"_index":29,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["declarations",{"_index":170,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":35,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["del",{"_index":20,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{}}}],["delete",{"_index":126,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser",{"_index":86,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@query('id",{"_index":163,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":105,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":168,"title":{"dependencies.html":{}},"body":{"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":52,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"index.html":{}}}],["development",{"_index":276,"title":{},"body":{"index.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":237,"title":{},"body":{"dependencies.html":{}}}],["dto/user.dto",{"_index":135,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":287,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":261,"title":{},"body":{"index.html":{}}}],["el",{"_index":27,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["eliminar",{"_index":106,"title":{},"body":{"controllers/UserController.html":{}}}],["entities",{"_index":338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/user.entity",{"_index":184,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":73,"title":{},"body":{"classes/User.html":{}}}],["error",{"_index":155,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["export",{"_index":51,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":173,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":134,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["false",{"_index":70,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["firstname",{"_index":10,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["framework",{"_index":259,"title":{},"body":{"index.html":{}}}],["function",{"_index":223,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":253,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getalluser",{"_index":87,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getalluser(@res",{"_index":147,"title":{},"body":{"controllers/UserController.html":{}}}],["getalluser(response",{"_index":114,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":255,"title":{"index.html":{}},"body":{}}],["grow",{"_index":294,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":266,"title":{},"body":{"index.html":{}}}],["here",{"_index":305,"title":{},"body":{"index.html":{}}}],["host",{"_index":328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":312,"title":{},"body":{"index.html":{}}}],["id",{"_index":113,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id.'})@apiresponse({status",{"_index":108,"title":{},"body":{"controllers/UserController.html":{}}}],["identificador",{"_index":43,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["identifier",{"_index":216,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":45,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":186,"title":{},"body":{"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":189,"title":{"injectables/UserService.html":{}},"body":{"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":190,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository",{"_index":204,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":205,"title":{},"body":{"injectables/UserService.html":{}}}],["inspired",{"_index":267,"title":{},"body":{"index.html":{}}}],["installation",{"_index":272,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":274,"title":{},"body":{"index.html":{}}}],["int",{"_index":65,"title":{},"body":{"classes/User.html":{}}}],["isnumber",{"_index":48,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":49,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":301,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":309,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":11,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["legend",{"_index":169,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":315,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":291,"title":{},"body":{"index.html":{}}}],["los",{"_index":117,"title":{},"body":{"controllers/UserController.html":{}}}],["matching",{"_index":57,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["menos",{"_index":32,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":26,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["metadata",{"_index":242,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":83,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":22,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":54,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":252,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":290,"title":{},"body":{"index.html":{}}}],["mode",{"_index":280,"title":{},"body":{"index.html":{}}}],["module",{"_index":165,"title":{"modules/UserModule.html":{}},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":167,"title":{"modules.html":{}},"body":{"modules/UserModule.html":{},"modules.html":{}}}],["more",{"_index":304,"title":{},"body":{"index.html":{}}}],["muestra",{"_index":115,"title":{},"body":{"controllers/UserController.html":{}}}],["myśliwiec",{"_index":310,"title":{},"body":{"index.html":{}}}],["name",{"_index":76,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":269,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":314,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":131,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":230,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":231,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":47,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":181,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":210,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["node.js",{"_index":258,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":19,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["npm",{"_index":273,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":69,"title":{},"body":{"classes/User.html":{}}}],["number",{"_index":39,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["number(process.env.db_port",{"_index":331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["número",{"_index":40,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ok",{"_index":145,"title":{},"body":{"controllers/UserController.html":{}}}],["ok.'})@apiresponse({status",{"_index":110,"title":{},"body":{"controllers/UserController.html":{}}}],["open",{"_index":292,"title":{},"body":{"index.html":{}}}],["optional",{"_index":102,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":178,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":319,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":228,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":101,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password",{"_index":334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pg",{"_index":239,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":12,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["please",{"_index":302,"title":{},"body":{"index.html":{}}}],["port",{"_index":330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":127,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":82,"title":{},"body":{"controllers/UserController.html":{}}}],["primarycolumn",{"_index":74,"title":{},"body":{"classes/User.html":{}}}],["primarycolumn({type",{"_index":67,"title":{},"body":{"classes/User.html":{}}}],["private",{"_index":206,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.db_host",{"_index":329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":282,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":257,"title":{},"body":{"index.html":{}}}],["project",{"_index":293,"title":{},"body":{"index.html":{}}}],["promise",{"_index":199,"title":{},"body":{"injectables/UserService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["providers",{"_index":172,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":128,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":129,"title":{},"body":{"controllers/UserController.html":{}}}],["read",{"_index":303,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":9,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{}}}],["reflect",{"_index":241,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":194,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":146,"title":{},"body":{"controllers/UserController.html":{}}}],["request.'})@delete",{"_index":111,"title":{},"body":{"controllers/UserController.html":{}}}],["request.'})@get",{"_index":120,"title":{},"body":{"controllers/UserController.html":{}}}],["request.'})@post",{"_index":99,"title":{},"body":{"controllers/UserController.html":{}}}],["request.'})@put",{"_index":124,"title":{},"body":{"controllers/UserController.html":{}}}],["required",{"_index":24,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["res",{"_index":130,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":177,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":90,"title":{},"body":{"controllers/UserController.html":{}}}],["response.status(200).json",{"_index":153,"title":{},"body":{"controllers/UserController.html":{}}}],["response.status(201).json",{"_index":160,"title":{},"body":{"controllers/UserController.html":{}}}],["response.status(400).json",{"_index":156,"title":{},"body":{"controllers/UserController.html":{}}}],["result",{"_index":56,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":58,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":152,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":104,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":244,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":277,"title":{},"body":{"index.html":{}}}],["rut",{"_index":13,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["rxjs",{"_index":246,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":262,"title":{},"body":{"index.html":{}}}],["ser",{"_index":34,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["server",{"_index":263,"title":{},"body":{"index.html":{}}}],["side",{"_index":264,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":296,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":254,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../orm.config.ts",{"_index":323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/configs/orm.config",{"_index":183,"title":{},"body":{"modules/UserModule.html":{}}}],["src/configs/orm.config.ts",{"_index":218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":222,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/user/dto/user.dto.ts",{"_index":6,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:11",{"_index":44,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/user.dto.ts:23",{"_index":36,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/user.dto.ts:35",{"_index":38,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/dto/user.dto.ts:43",{"_index":42,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/user/entities/user.entity.ts",{"_index":60,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":64,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:15",{"_index":66,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:6",{"_index":71,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:9",{"_index":63,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":81,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:25",{"_index":121,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:38",{"_index":100,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:51",{"_index":125,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:64",{"_index":112,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":179,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":191,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":201,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":198,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":203,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":200,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:8",{"_index":195,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":278,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":281,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":283,"title":{},"body":{"index.html":{}}}],["started",{"_index":256,"title":{"index.html":{}},"body":{}}],["starter",{"_index":271,"title":{},"body":{"index.html":{}}}],["statements",{"_index":217,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":144,"title":{},"body":{"controllers/UserController.html":{}}}],["stay",{"_index":306,"title":{},"body":{"index.html":{}}}],["string",{"_index":16,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["summary",{"_index":142,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":297,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":317,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":248,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":227,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":226,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":286,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":289,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":288,"title":{},"body":{"index.html":{}}}],["tests",{"_index":285,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":295,"title":{},"body":{"index.html":{}}}],["this.userrepository.delete(id",{"_index":213,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":207,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(createuserdto.rut",{"_index":208,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":211,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(body",{"_index":159,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":164,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getalluser",{"_index":151,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser(body",{"_index":162,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":212,"title":{},"body":{"injectables/UserService.html":{}}}],["todos",{"_index":116,"title":{},"body":{"controllers/UserController.html":{}}}],["touch",{"_index":307,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":234,"title":{},"body":{"dependencies.html":{}}}],["través",{"_index":107,"title":{},"body":{"controllers/UserController.html":{}}}],["true",{"_index":53,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["true})@isnumber",{"_index":41,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@minlength(3",{"_index":25,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["try",{"_index":148,"title":{},"body":{"controllers/UserController.html":{}}}],["twitter",{"_index":313,"title":{},"body":{"index.html":{}}}],["type",{"_index":14,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":75,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormconfigurations",{"_index":182,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":180,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":188,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot(typeormconfigurations",{"_index":187,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmoduleoptions",{"_index":324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":270,"title":{},"body":{"index.html":{}}}],["ui",{"_index":249,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":93,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined",{"_index":209,"title":{},"body":{"injectables/UserService.html":{}}}],["unique",{"_index":68,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":284,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":88,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(@body",{"_index":161,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(body",{"_index":122,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(createuserdto",{"_index":202,"title":{},"body":{"injectables/UserService.html":{}}}],["user",{"_index":59,"title":{"classes/User.html":{}},"body":{"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":185,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":133,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":79,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":166,"title":{"modules/UserModule.html":{}},"body":{"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":196,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":77,"title":{},"body":{"classes/User.html":{},"controllers/UserController.html":{}}}],["userservice",{"_index":132,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usuario",{"_index":21,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UserController.html":{}}}],["usuario.'})@apiresponse({status",{"_index":94,"title":{},"body":{"controllers/UserController.html":{}}}],["usuarios",{"_index":118,"title":{},"body":{"controllers/UserController.html":{}}}],["validator",{"_index":50,"title":{},"body":{"classes/CreateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":62,"title":{},"body":{"classes/User.html":{}}}],["variable",{"_index":219,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":322,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":279,"title":{},"body":{"index.html":{}}}],["website",{"_index":311,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":300,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":176,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                firstname\n                            \n                            \n                                    Readonly\n                                lastname\n                            \n                            \n                                    Readonly\n                                phonenumber\n                            \n                            \n                                    Readonly\n                                rut\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Nombre del usuario.', minLength: 3, type: String, required: true})@MinLength(3, {message: 'El campo  debe contener al menos 3 caracteres.'})@IsString({message: 'El campo  debe ser string.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Apellido del usuario.', minLength: 3, type: String, required: true})@MinLength(3, {message: 'El campo  debe contener al menos 3 caracteres.'})@IsString({message: 'El campo  debe ser string.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phonenumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Número del usuario.', type: Number, required: true})@IsNumber({}, {message: 'El campo  debe ser número.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            rut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Rut identificador del usuario.', type: Number, required: true})@IsNumber({}, {message: 'El campo  debe ser número.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/user.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsString, MinLength } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'Rut identificador del usuario.',\n    type: Number,\n    required: true,\n  })\n  @IsNumber({}, { message: 'El campo  debe ser número.' })\n  readonly rut: number;\n\n  @ApiProperty({\n    description: 'Nombre del usuario.',\n    minLength: 3,\n    type: String,\n    required: true,\n  })\n  @MinLength(3, {\n    message: 'El campo  debe contener al menos 3 caracteres.',\n  })\n  @IsString({ message: 'El campo  debe ser string.' })\n  readonly firstname: string;\n\n  @ApiProperty({\n    description: 'Apellido del usuario.',\n    minLength: 3,\n    type: String,\n    required: true,\n  })\n  @MinLength(3, {\n    message: 'El campo  debe contener al menos 3 caracteres.',\n  })\n  @IsString({ message: 'El campo  debe ser string.' })\n  readonly lastname: string;\n\n  @ApiProperty({\n    description: 'Número del usuario.',\n    type: Number,\n    required: true,\n  })\n  @IsNumber({}, { message: 'El campo  debe ser número.' })\n  readonly phonenumber: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                phonenumber\n                            \n                            \n                                rut\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'varchar'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phonenumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'int'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rut\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn({type: 'int', unique: true, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/entities/user.entity.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from 'typeorm';\n\n@Entity({ name: 'users' })\nexport class User {\n  @PrimaryColumn({ type: 'int', unique: true, nullable: false })\n  rut: number;\n\n  @Column({ type: 'varchar' })\n  firstname: string;\n\n  @Column({ type: 'varchar' })\n  lastname: string;\n\n  @Column({ type: 'int' })\n  phonenumber: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAllUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(body: CreateUserDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Crea un usuario.'})@ApiResponse({status: 201, description: 'CREATED.'})@ApiResponse({status: 400, description: 'BAD REQUEST.'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Eliminar un usuario a través del ID.'})@ApiResponse({status: 200, description: 'OK.'})@ApiResponse({status: 400, description: 'BAD REQUEST.'})@Delete()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUser(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Muestra todos los usuarios creados.'})@ApiResponse({status: 200, description: 'OK.'})@ApiResponse({status: 400, description: 'BAD REQUEST.'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(body: CreateUserDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Actualiza un usuario a través del ID.'})@ApiResponse({status: 200, description: 'OK.'})@ApiResponse({status: 400, description: 'BAD REQUEST.'})@Put()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Put,\n  Query,\n  Res,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { Response } from 'express';\nimport { CreateUserDto } from './dto/user.dto';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Usuario')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({ summary: 'Muestra todos los usuarios creados.' })\n  @ApiResponse({ status: 200, description: 'OK.' })\n  @ApiResponse({ status: 400, description: 'BAD REQUEST.' })\n  @Get()\n  async getAllUser(@Res() response: Response) {\n    try {\n      const users = await this.userService.getAllUser();\n      return response.status(200).json({ ok: true, users });\n    } catch (error) {\n      return response.status(400).json({ ok: false, error });\n    }\n  }\n\n  @ApiOperation({ summary: 'Crea un usuario.' })\n  @ApiResponse({ status: 201, description: 'CREATED.' })\n  @ApiResponse({ status: 400, description: 'BAD REQUEST.' })\n  @Post()\n  async createUser(@Body() body: CreateUserDto, @Res() response: Response) {\n    try {\n      const user = await this.userService.createUser(body);\n      return response.status(201).json({ ok: true, user });\n    } catch (error) {\n      return response.status(400).json({ ok: false, error });\n    }\n  }\n\n  @ApiOperation({ summary: 'Actualiza un usuario a través del ID.' })\n  @ApiResponse({ status: 200, description: 'OK.' })\n  @ApiResponse({ status: 400, description: 'BAD REQUEST.' })\n  @Put()\n  async updateUser(@Body() body: CreateUserDto, @Res() response: Response) {\n    try {\n      const user = await this.userService.updateUser(body);\n      return response.status(200).json({ ok: true, user });\n    } catch (error) {\n      return response.status(400).json({ ok: false, error });\n    }\n  }\n\n  @ApiOperation({ summary: 'Eliminar un usuario a través del ID.' })\n  @ApiResponse({ status: 200, description: 'OK.' })\n  @ApiResponse({ status: 400, description: 'BAD REQUEST.' })\n  @Delete()\n  async deleteUser(@Query('id') id: string, @Res() response: Response) {\n    try {\n      const user = await this.userService.deleteUser(id);\n      return response.status(200).json({ ok: true, user });\n    } catch (error) {\n      return response.status(400).json({ ok: false, error });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfigurations } from 'src/configs/orm.config';\nimport { User } from './entities/user.entity';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfigurations),\n    TypeOrmModule.forFeature([User]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAllUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUser()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/user.dto';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n  ) {}\n\n  async getAllUser(): Promise {\n    return await this.userRepository.find();\n  }\n\n  async createUser(createUserDto: CreateUserDto): Promise {\n    if ((await this.userRepository.findOne(createUserDto.rut)) === undefined) {\n      let user = new User();\n      user = { ...createUserDto };\n\n      return await this.userRepository.save(user);\n    }\n\n    throw new Error();\n  }\n\n  async updateUser(createUserDto: CreateUserDto): Promise {\n    let user = new User();\n    user = { ...createUserDto };\n\n    return await this.userRepository.save(user);\n  }\n\n  async deleteUser(id: string): Promise {\n    return await this.userRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/configs/orm.config.ts\n            \n            variable\n            typeOrmConfigurations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.6.1\n        \n            @nestjs/typeorm : ^7.1.4\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            dotenv : ^8.2.0\n        \n            pg : ^8.4.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.28\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            typeOrmConfigurations   (src/.../orm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/configs/orm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfigurations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: process.env.DB_HOST,\n  port: Number(process.env.DB_PORT),\n  username: process.env.DB_USERNAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  entities: ['dist/**/*.entity{.ts,.js}'],\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
